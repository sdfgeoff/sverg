pub fn color_attachment_int_to_gl(int: u32) -> u32 {
    assert!(int <= 10);
    glow::COLOR_ATTACHMENT0 + int
}

pub fn texture_unit_id_to_gl(int: u32) -> u32 {
    assert!(int <= 32);
    glow::TEXTURE0 + int
}

/// The precision and number of channels used for a buffer
/// Not all of these formats work as render targets. In my tests
/// RGBA8 and RGBA32F work on Chrome and Firefox.
#[derive(Debug, Clone, PartialEq)]
#[allow(non_camel_case_types, dead_code)]
pub enum TextureFormat {
    R8,
    R8_SNORM,
    R16F,
    R32F,
    R8UI,
    R8I,
    R16UI,
    R16I,
    R32UI,
    R32I,
    RG8,
    RG8_SNORM,
    RG16F,
    RG32F,
    RG8UI,
    RG8I,
    RG16UI,
    RG16I,
    RG32UI,
    RG32I,
    RGB8,
    SRGB8,
    RGB565,
    RGB8_SNORM,
    R11F_G11F_B10F,
    RGB9_E5,
    RGB16F,
    RGB32F,
    RGB8UI,
    RGB8I,
    RGB16UI,
    RGB16I,
    RGB32UI,
    RGB32I,
    RGBA8,
    SRGB8_ALPHA8,
    RGBA8_SNORM,
    RGB5_A1,
    RGBA4,
    RGB10_A2,
    RGBA16F,
    RGBA32F,
    RGBA8UI,
    RGBA8I,
    RGB10_A2UI,
    RGBA16UI,
    RGBA16I,
    RGBA32I,
    RGBA32UI,
}
impl TextureFormat {
    pub fn to_sized_internal_format(&self) -> u32 {
        match self {
            Self::R8 => glow::R8,
            Self::R8_SNORM => glow::R8_SNORM,
            Self::R16F => glow::R16F,
            Self::R32F => glow::R32F,
            Self::R8UI => glow::R8UI,
            Self::R8I => glow::R8I,
            Self::R16UI => glow::R16UI,
            Self::R16I => glow::R16I,
            Self::R32UI => glow::R32UI,
            Self::R32I => glow::R32I,
            Self::RG8 => glow::RG8,
            Self::RG8_SNORM => glow::RG8_SNORM,
            Self::RG16F => glow::RG16F,
            Self::RG32F => glow::RG32F,
            Self::RG8UI => glow::RG8UI,
            Self::RG8I => glow::RG8I,
            Self::RG16UI => glow::RG16UI,
            Self::RG16I => glow::RG16I,
            Self::RG32UI => glow::RG32UI,
            Self::RG32I => glow::RG32I,
            Self::RGB8 => glow::RGB8,
            Self::SRGB8 => glow::SRGB8,
            Self::RGB565 => glow::RGB565,
            Self::RGB8_SNORM => glow::RGB8_SNORM,
            Self::R11F_G11F_B10F => glow::R11F_G11F_B10F,
            Self::RGB9_E5 => glow::RGB9_E5,
            Self::RGB16F => glow::RGB16F,
            Self::RGB32F => glow::RGB32F,
            Self::RGB8UI => glow::RGB8UI,
            Self::RGB8I => glow::RGB8I,
            Self::RGB16UI => glow::RGB16UI,
            Self::RGB16I => glow::RGB16I,
            Self::RGB32UI => glow::RGB32UI,
            Self::RGB32I => glow::RGB32I,
            Self::RGBA8 => glow::RGBA8,
            Self::SRGB8_ALPHA8 => glow::SRGB8_ALPHA8,
            Self::RGBA8_SNORM => glow::RGBA8_SNORM,
            Self::RGB5_A1 => glow::RGB5_A1,
            Self::RGBA4 => glow::RGBA4,
            Self::RGB10_A2 => glow::RGB10_A2,
            Self::RGBA16F => glow::RGBA16F,
            Self::RGBA32F => glow::RGBA32F,
            Self::RGBA8UI => glow::RGBA8UI,
            Self::RGBA8I => glow::RGBA8I,
            Self::RGB10_A2UI => glow::RGB10_A2UI,
            Self::RGBA16UI => glow::RGBA16UI,
            Self::RGBA16I => glow::RGBA16I,
            Self::RGBA32I => glow::RGBA32I,
            Self::RGBA32UI => glow::RGBA32UI,
        }
    }

    pub fn to_format(&self) -> u32 {
        match self {
            Self::R8 => glow::RED,
            Self::R8_SNORM => glow::RED,
            Self::R16F => glow::RED,
            Self::R32F => glow::RED,
            Self::R8UI => glow::RED_INTEGER,
            Self::R8I => glow::RED_INTEGER,
            Self::R16UI => glow::RED_INTEGER,
            Self::R16I => glow::RED_INTEGER,
            Self::R32UI => glow::RED_INTEGER,
            Self::R32I => glow::RED_INTEGER,
            Self::RG8 => glow::RG,
            Self::RG8_SNORM => glow::RG,
            Self::RG16F => glow::RG,
            Self::RG32F => glow::RG,
            Self::RG8UI => glow::RG_INTEGER,
            Self::RG8I => glow::RG_INTEGER,
            Self::RG16UI => glow::RG_INTEGER,
            Self::RG16I => glow::RG_INTEGER,
            Self::RG32UI => glow::RG_INTEGER,
            Self::RG32I => glow::RG_INTEGER,
            Self::RGB8 => glow::RGB,
            Self::SRGB8 => glow::RGB,
            Self::RGB565 => glow::RGB,
            Self::RGB8_SNORM => glow::RGB,
            Self::R11F_G11F_B10F => glow::RGB,
            Self::RGB9_E5 => glow::RGB,
            Self::RGB16F => glow::RGB,
            Self::RGB32F => glow::RGB,
            Self::RGB8UI => glow::RGB_INTEGER,
            Self::RGB8I => glow::RGB_INTEGER,
            Self::RGB16UI => glow::RGB_INTEGER,
            Self::RGB16I => glow::RGB_INTEGER,
            Self::RGB32UI => glow::RGB_INTEGER,
            Self::RGB32I => glow::RGB_INTEGER,
            Self::RGBA8 => glow::RGBA,
            Self::SRGB8_ALPHA8 => glow::RGBA,
            Self::RGBA8_SNORM => glow::RGBA,
            Self::RGB5_A1 => glow::RGBA,
            Self::RGBA4 => glow::RGBA,
            Self::RGB10_A2 => glow::RGBA,
            Self::RGBA16F => glow::RGBA,
            Self::RGBA32F => glow::RGBA,
            Self::RGBA8UI => glow::RGBA_INTEGER,
            Self::RGBA8I => glow::RGBA_INTEGER,
            Self::RGB10_A2UI => glow::RGBA_INTEGER,
            Self::RGBA16UI => glow::RGBA_INTEGER,
            Self::RGBA16I => glow::RGBA_INTEGER,
            Self::RGBA32I => glow::RGBA_INTEGER,
            Self::RGBA32UI => glow::RGBA_INTEGER,
        }
    }

    pub fn to_type(&self) -> u32 {
        match self {
            Self::R8 => glow::UNSIGNED_BYTE,
            Self::R8_SNORM => glow::BYTE,
            Self::R16F => glow::HALF_FLOAT,
            Self::R32F => glow::FLOAT,
            Self::R8UI => glow::UNSIGNED_BYTE,
            Self::R8I => glow::BYTE,
            Self::R16UI => glow::UNSIGNED_SHORT,
            Self::R16I => glow::SHORT,
            Self::R32UI => glow::UNSIGNED_INT,
            Self::R32I => glow::INT,
            Self::RG8 => glow::UNSIGNED_BYTE,
            Self::RG8_SNORM => glow::BYTE,
            Self::RG16F => glow::FLOAT,
            Self::RG32F => glow::FLOAT,
            Self::RG8UI => glow::UNSIGNED_BYTE,
            Self::RG8I => glow::BYTE,
            Self::RG16UI => glow::UNSIGNED_SHORT,
            Self::RG16I => glow::SHORT,
            Self::RG32UI => glow::UNSIGNED_INT,
            Self::RG32I => glow::INT,
            Self::RGB8 => glow::UNSIGNED_BYTE,
            Self::SRGB8 => glow::UNSIGNED_BYTE,
            Self::RGB565 => glow::UNSIGNED_SHORT_5_6_5,
            Self::RGB8_SNORM => glow::BYTE,
            Self::R11F_G11F_B10F => glow::UNSIGNED_INT_10F_11F_11F_REV,
            Self::RGB9_E5 => glow::UNSIGNED_INT_5_9_9_9_REV,
            Self::RGB16F => glow::HALF_FLOAT,
            Self::RGB32F => glow::FLOAT,
            Self::RGB8UI => glow::UNSIGNED_BYTE,
            Self::RGB8I => glow::BYTE,
            Self::RGB16UI => glow::UNSIGNED_SHORT,
            Self::RGB16I => glow::SHORT,
            Self::RGB32UI => glow::UNSIGNED_INT,
            Self::RGB32I => glow::INT,
            Self::RGBA8 => glow::UNSIGNED_BYTE,
            Self::SRGB8_ALPHA8 => glow::UNSIGNED_BYTE,
            Self::RGBA8_SNORM => glow::BYTE,
            Self::RGB5_A1 => glow::UNSIGNED_INT_2_10_10_10_REV,
            Self::RGBA4 => glow::UNSIGNED_SHORT_4_4_4_4,
            Self::RGB10_A2 => glow::UNSIGNED_INT_2_10_10_10_REV,
            Self::RGBA16F => glow::HALF_FLOAT,
            Self::RGBA32F => glow::FLOAT,
            Self::RGBA8UI => glow::UNSIGNED_BYTE,
            Self::RGBA8I => glow::BYTE,
            Self::RGB10_A2UI => glow::UNSIGNED_INT_2_10_10_10_REV,
            Self::RGBA16UI => glow::UNSIGNED_SHORT,
            Self::RGBA16I => glow::SHORT,
            Self::RGBA32I => glow::INT,
            Self::RGBA32UI => glow::UNSIGNED_INT,
        }
    }
}
